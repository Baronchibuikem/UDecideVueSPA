{"remainingRequest":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/src/views/GetAllPolls.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/src/views/GetAllPolls.vue","mtime":1587233420360},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/cache-loader/dist/cjs.js","mtime":1586229982811},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/cache-loader/dist/cjs.js","mtime":1586229982811},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapActions } from \"vuex\";\nexport default {\n\tname: \"GetAllPolls\",\n\tdata() {\n\t\treturn {\n\t\t\tlist: [],\n\t\t\tselected_poll: null,\n\t\t\tpoll_creator: null,\n\t\t\tselected_choice: null,\n\t\t\tcurrent_date: \"\"\n\t\t};\n\t},\n\tmethods: {\n\t\t/* \tThis function is used to bookmark a poll,\n\t\t\tvalue is an object data from the poll where we destructure and get the id of that particular poll\n\t\t\tUserID is the id of the particular loggedIn user which we received from our getters\n\t\t\twe use these values to update the selected_poll and poll_creator which are keys in our data\n\t\t\tAfter the update we dispatch the likePoll action passing in the data as parameter\n\t\t*/\n\t\tlikePoll(value, userID) {\n\t\t\tconst { id } = { ...value };\n\t\t\tthis.selected_poll = id;\n\t\t\tthis.poll_creator = userID;\n\t\t\tlet data = {\n\t\t\t\tpoll: this.selected_poll,\n\t\t\t\tuser: this.poll_creator\n\t\t\t};\n\t\t\tthis.$store\n\t\t\t\t.dispatch(\"likePoll\", data)\n\t\t\t\t.then(() => this.$router.push(\"/feeds\"));\n\t\t},\n\n\t\t/* \tThis function is used to bookmark a poll,\n\t\t\tvalue is an object data from the poll where we destructure and get the id of that particular poll\n\t\t\tUserID is the id of the particular loggedIn user which we received from our getters\n\t\t\twe use these values to update the selected_poll and poll_creator which are keys in our data\n\t\t\tAfter the update we dispatch the bookmarkPoll action passing in the data as parameter\n\t\t*/\n\t\tbookmarkPoll(value, userID) {\n\t\t\tconst { id } = { ...value };\n\n\t\t\tthis.selected_poll = id;\n\t\t\tthis.poll_creator = userID;\n\t\t\tlet data = {\n\t\t\t\tpoll: this.selected_poll,\n\t\t\t\tuser: this.poll_creator\n\t\t\t};\n\t\t\tthis.$store\n\t\t\t\t.dispatch(\"bookmarkPoll\", data)\n\t\t\t\t.then(() => this.$router.push(\"/\"));\n\t\t},\n\n\t\t/* \tThis function is used to vote on a choice attached to a poll,\n\t\t\tvalue is an object data from the poll where we destructure and get the id of that particular poll\n\t\t\tUserID is the id of the particular choice which we received when we looped over the choices\n\t\t\twe use these values to update the selected_poll and selected_choice which are keys in our data\n\t\t\tAfter the update we dispatch the voteChoice action passing in the data as parameter\n\t\t*/\n\t\tvoteChoice(value, userID) {\n\t\t\tconst { id } = { ...value };\n\t\t\tthis.selected_poll = id;\n\t\t\tthis.selected_choice = userID;\n\t\t\tlet data = {\n\t\t\t\tpoll: this.selected_poll,\n\t\t\t\tchoice: this.selected_choice\n\t\t\t};\n\t\t\tthis.$store\n\t\t\t\t.dispatch(\"voteChoice\", data)\n\t\t\t\t.then(() => this.$router.push(\"/\"));\n\t\t},\n\t\t// Here we call our getPolls action\n\t\t...mapActions([\"getPolls\", \"getTrendingPolls\"])\n\t},\n\tcomputed: {\n\t\t// This returns all our updated state\n\t\t...mapGetters([\n\t\t\t\"allPolls\",\n\t\t\t\"getUser\",\n\t\t\t\"numberOfFollowers\",\n\t\t\t\"numberOfFollowed\",\n\t\t\t\"numberOfPolls\",\n\t\t\t\"isLoggedIn\",\n\t\t\t\"isAuthenticated\",\n\t\t\t\"getuserID\"\n\t\t])\n\t},\n\tmounted() {\n\t\t// Added the called to ensure the element is mounted once it is called.\n\t\tthis.$nextTick(() => {\n\t\t\tthis.getPolls();\n\t\t});\n\t}\n};\n",{"version":3,"sources":["GetAllPolls.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GetAllPolls.vue","sourceRoot":"src/views","sourcesContent":["<template>\n\t<div>\n\t\t<div\n\t\t\tclass=\"todo-item sl-right\"\n\t\t\tv-for=\"poll in allPolls\"\n\t\t\tv-bind:key=\"poll.id\"\n\t\t>\n\t\t\t<div class=\"sl-item\">\n\t\t\t\t<PollMenu></PollMenu>\n\t\t\t\t<div class=\"sl-left\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"http://wrappixel.com/demos/admin-templates/admin-wrap/assets/images/users/2.jpg\"\n\t\t\t\t\t\talt=\"user\"\n\t\t\t\t\t\tclass=\"img-circle\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t\t<a href=\"#\" class=\"link\">{{ poll.poller_username }}</a>\n\t\t\t\t\t\t<span class=\"sl-date\">{{ poll.pub_date }} </span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m-t-20\">\n\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\n\t\t\t\t\t\t\t<p>{{ poll.question }}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"m-t-20\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<!-- Here we are looping through the choice array in our poll -->\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclass=\"\"\n\t\t\t\t\t\t\t\tv-for=\"choice in poll.choices\"\n\t\t\t\t\t\t\t\tv-bind:key=\"choice.id\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"col-md-12 linkHover\"\n\t\t\t\t\t\t\t\t\tdata-toggle=\"tooltip\"\n\t\t\t\t\t\t\t\t\ttitle=\"vote\"\n\t\t\t\t\t\t\t\t\tv-if=\"choice.choice_text !== null\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<!-- Here we call the voteChoice method and pass in the poll object and the selected choice id -->\n\t\t\t\t\t\t\t\t\t<p @click=\"voteChoice(poll, choice.id)\">\n\t\t\t\t\t\t\t\t\t\t{{ choice.choice_vote_count }}-{{ choice.choice_text }}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"like-comm m-t-20\">\n\t\t\t\t\t\t<!-- Here we call the bookmarkPoll method and pass in the poll object and current user id which we get from our getUser from getters -->\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclass=\"linkHover m-r-10\"\n\t\t\t\t\t\t\t@click=\"bookmarkPoll(poll, getUser.userObj.user.id)\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i class=\"fa fa-thumb text-danger\"></i\n\t\t\t\t\t\t\t>{{ poll.vote_count }} bookmark</span\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<!--  Here we call the likePoll method and pass in the poll object and current user id which we get from our getUser from getters -->\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclass=\"linkHover m-r-10\"\n\t\t\t\t\t\t\t@click=\"likePoll(poll, getUser.userObj.user.id)\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i class=\"fa fa-heart text-danger\"></i>\n\t\t\t\t\t\t\t{{ poll.total_likes }} Love\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from \"vuex\";\nexport default {\n\tname: \"GetAllPolls\",\n\tdata() {\n\t\treturn {\n\t\t\tlist: [],\n\t\t\tselected_poll: null,\n\t\t\tpoll_creator: null,\n\t\t\tselected_choice: null,\n\t\t\tcurrent_date: \"\"\n\t\t};\n\t},\n\tmethods: {\n\t\t/* \tThis function is used to bookmark a poll,\n\t\t\tvalue is an object data from the poll where we destructure and get the id of that particular poll\n\t\t\tUserID is the id of the particular loggedIn user which we received from our getters\n\t\t\twe use these values to update the selected_poll and poll_creator which are keys in our data\n\t\t\tAfter the update we dispatch the likePoll action passing in the data as parameter\n\t\t*/\n\t\tlikePoll(value, userID) {\n\t\t\tconst { id } = { ...value };\n\t\t\tthis.selected_poll = id;\n\t\t\tthis.poll_creator = userID;\n\t\t\tlet data = {\n\t\t\t\tpoll: this.selected_poll,\n\t\t\t\tuser: this.poll_creator\n\t\t\t};\n\t\t\tthis.$store\n\t\t\t\t.dispatch(\"likePoll\", data)\n\t\t\t\t.then(() => this.$router.push(\"/feeds\"));\n\t\t},\n\n\t\t/* \tThis function is used to bookmark a poll,\n\t\t\tvalue is an object data from the poll where we destructure and get the id of that particular poll\n\t\t\tUserID is the id of the particular loggedIn user which we received from our getters\n\t\t\twe use these values to update the selected_poll and poll_creator which are keys in our data\n\t\t\tAfter the update we dispatch the bookmarkPoll action passing in the data as parameter\n\t\t*/\n\t\tbookmarkPoll(value, userID) {\n\t\t\tconst { id } = { ...value };\n\n\t\t\tthis.selected_poll = id;\n\t\t\tthis.poll_creator = userID;\n\t\t\tlet data = {\n\t\t\t\tpoll: this.selected_poll,\n\t\t\t\tuser: this.poll_creator\n\t\t\t};\n\t\t\tthis.$store\n\t\t\t\t.dispatch(\"bookmarkPoll\", data)\n\t\t\t\t.then(() => this.$router.push(\"/\"));\n\t\t},\n\n\t\t/* \tThis function is used to vote on a choice attached to a poll,\n\t\t\tvalue is an object data from the poll where we destructure and get the id of that particular poll\n\t\t\tUserID is the id of the particular choice which we received when we looped over the choices\n\t\t\twe use these values to update the selected_poll and selected_choice which are keys in our data\n\t\t\tAfter the update we dispatch the voteChoice action passing in the data as parameter\n\t\t*/\n\t\tvoteChoice(value, userID) {\n\t\t\tconst { id } = { ...value };\n\t\t\tthis.selected_poll = id;\n\t\t\tthis.selected_choice = userID;\n\t\t\tlet data = {\n\t\t\t\tpoll: this.selected_poll,\n\t\t\t\tchoice: this.selected_choice\n\t\t\t};\n\t\t\tthis.$store\n\t\t\t\t.dispatch(\"voteChoice\", data)\n\t\t\t\t.then(() => this.$router.push(\"/\"));\n\t\t},\n\t\t// Here we call our getPolls action\n\t\t...mapActions([\"getPolls\", \"getTrendingPolls\"])\n\t},\n\tcomputed: {\n\t\t// This returns all our updated state\n\t\t...mapGetters([\n\t\t\t\"allPolls\",\n\t\t\t\"getUser\",\n\t\t\t\"numberOfFollowers\",\n\t\t\t\"numberOfFollowed\",\n\t\t\t\"numberOfPolls\",\n\t\t\t\"isLoggedIn\",\n\t\t\t\"isAuthenticated\",\n\t\t\t\"getuserID\"\n\t\t])\n\t},\n\tmounted() {\n\t\t// Added the called to ensure the element is mounted once it is called.\n\t\tthis.$nextTick(() => {\n\t\t\tthis.getPolls();\n\t\t});\n\t}\n};\n</script>\n\n<style></style>\n"]}]}