{"remainingRequest":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/babel-loader/lib/index.js!/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/eslint-loader/index.js??ref--13-0!/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/src/store/modules/UserAuthentication.js","dependencies":[{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/src/store/modules/UserAuthentication.js","mtime":1587238335952},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/cache-loader/dist/cjs.js","mtime":1586229982811},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectWithoutProperties from \"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/@babel/runtime/helpers/builtin/es6/objectWithoutProperties\";\nimport _objectSpread from \"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport axios from \"axios\";\nimport { apiBaseUrl } from \"../baseUrl\";\nvar state = {\n  // The keys defined below represents the initial state of our data the first time our app loads\n  user: {\n    userObj: {},\n    followers: [],\n    followed: [],\n    polls: [],\n    likes: []\n  },\n  userID: null,\n  error: [],\n  status: \"\",\n  token: localStorage.getItem(\"token\") || \"\",\n  loggedIn: false,\n  Polls: [],\n  trendingPolls: [],\n  SinglePolls: {}\n}; // getters pull updated value from our data and they are then called by the components that needs them to\n// present data to the user(s)\n\nvar getters = {\n  allPolls: function allPolls(state) {\n    return state.Polls;\n  },\n  pollsTrending: function pollsTrending(state) {\n    return state.trendingPolls;\n  },\n  isLoggedIn: function isLoggedIn(state) {\n    return !!state.token;\n  },\n  authStatus: function authStatus(state) {\n    return state.status;\n  },\n  getUser: function getUser(state) {\n    return state.user;\n  },\n  numberOfFollowers: function numberOfFollowers(state) {\n    return state.user.followers.length;\n  },\n  numberOfFollowed: function numberOfFollowed(state) {\n    return state.user.followed.length;\n  },\n  numberOfPolls: function numberOfPolls(state) {\n    return state.user.polls.length;\n  },\n  getToken: function getToken(state) {\n    return state.token;\n  },\n  getuserID: function getuserID(state) {\n    return state.userID;\n  },\n  isAuthenticated: function isAuthenticated(state) {\n    return state.loggedIn;\n  }\n}; // actions are mostly responsible for performing CRUD operations as allowed on the API endpoints being called\n\nvar actions = {\n  // This is used to make a post request to the login API, where payload is the data that was passed when the\n  // login action was dispatched from the Login component\n  login: function login(_ref, payload) {\n    var commit = _ref.commit,\n        dispatch = _ref.dispatch;\n    return new Promise(function (resolve, reject) {\n      commit(\"auth_request\");\n      axios({\n        url: \"\".concat(apiBaseUrl.baseRoute, \"/users/login/\"),\n        data: payload,\n        method: \"POST\"\n      }).then(function (response) {\n        var token = response.data.token;\n        var user = response.data.pk;\n        localStorage.setItem(\"token\", token);\n        axios.defaults.headers.common[\"Authorization\"] = token;\n        commit(\"auth_success\", {\n          token: token,\n          user: user\n        }); // Here we are dispatching the getUser action since we want to get the loggedIn users profile\n        // along with the data being sent back by the login action\n\n        dispatch(\"getUser\", user);\n        resolve(response);\n      }).catch(function (err) {\n        commit(\"auth_error\"); // localStorage.removeItem(\"token\");\n\n        reject(err);\n      });\n    });\n  },\n  logout: function logout(_ref2) {\n    var commit = _ref2.commit;\n    // This action is used to logout a user\n    return new Promise(function (resolve) {\n      commit(\"logout\");\n      localStorage.removeItem(\"token\");\n      delete axios.defaults.headers.common[\"Authorization\"];\n      resolve();\n    });\n  },\n  // This action is used to send a post request to the backend API to register a new user\n  register: function () {\n    var _register = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref3, payload) {\n      var commit, _ref4, response;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context.next = 3;\n              return axios({\n                url: \"\".concat(apiBaseUrl.baseRoute, \"/users/signup/\"),\n                data: payload,\n                method: \"POST\"\n              });\n\n            case 3:\n              _ref4 = _context.sent;\n              response = _ref4.response;\n              commit(\"auth_success\", response);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function register(_x, _x2) {\n      return _register.apply(this, arguments);\n    };\n  }(),\n  // This action is used to make a get request to the API endpoint so we can fetch data to update our\n  // current loggedIn user profile\n  getUser: function getUser(_ref5, id) {\n    var commit = _ref5.commit,\n        getters = _ref5.getters;\n    var config = {\n      headers: {\n        Authorization: \"Token \".concat(getters.getToken) // \"Content-Type\": \"application/json\"\n\n      }\n    };\n    axios.get(\"\".concat(apiBaseUrl.baseRoute, \"/userprofile/\").concat(id, \"/\"), config).then(function (response) {\n      axios.defaults.headers.common[\"Authorization\"] = config;\n      commit(\"fetch_users\", response.data);\n    });\n  },\n  // This action is used to get all available polls from the server\n  getPolls: function () {\n    var _getPolls = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(_ref6) {\n      var commit, response;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref6.commit;\n              _context2.next = 3;\n              return axios.get(\"\".concat(apiBaseUrl.baseRoute, \"/polls/polls/\"));\n\n            case 3:\n              response = _context2.sent;\n              console.log(response.data, \"Polls from the API\");\n              commit(\"SUCCESS\", response.data);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function getPolls(_x3) {\n      return _getPolls.apply(this, arguments);\n    };\n  }(),\n  // this action is used to make a post request to create a new poll\n  newPoll: function newPoll(_ref7, payload) {\n    var commit = _ref7.commit,\n        getters = _ref7.getters;\n    console.log(\"DATA FROM POLL CREATE\", payload);\n    var config = {\n      headers: {\n        // \"Content-Type\": \"application/json\",\n        Authorization: \"Token \".concat(getters.getToken)\n      }\n    };\n    axios.post(\"\".concat(apiBaseUrl.baseRoute, \"/polls/create-polls/\"), payload, config).then(function (response) {\n      axios.defaults.headers.common[\"Authorization\"] = config;\n      commit(\"SUCCESS\", response.data);\n    });\n  },\n  likePoll: function likePoll(_ref8, payload) {\n    var commit = _ref8.commit,\n        getters = _ref8.getters;\n    var config = {\n      headers: {\n        // \"Content-Type\": \"application/json\",\n        Authorization: \"Token \".concat(getters.getToken)\n      }\n    };\n    axios.post(\"\".concat(apiBaseUrl.baseRoute, \"/userprofile/like-poll/\"), payload, config).then(function (response) {\n      axios.defaults.headers.common[\"Authorization\"] = config;\n      commit(\"SUCCESS\", response.data);\n    });\n  },\n  // This action is used to select a post request for voting on a particular choice.\n  voteChoice: function voteChoice(_ref9, payload) {\n    var commit = _ref9.commit,\n        getters = _ref9.getters;\n    console.log(payload, \"FROM VOTE CHOICE ACTION\");\n\n    var _payload = _objectSpread({}, payload),\n        poll = _payload.poll,\n        choice = _payload.choice;\n\n    var config = {\n      headers: {\n        // \"Content-Type\": \"application/json\",\n        Authorization: \"Token \".concat(getters.getToken)\n      }\n    };\n    axios.post(\"\".concat(apiBaseUrl.baseRoute, \"/polls/vote/\").concat(poll, \"/\").concat(choice, \"/\"), payload, config).then(function (response) {\n      axios.defaults.headers.common[\"Authorization\"] = config;\n      commit(\"SUCCESS\", response.data);\n    });\n  },\n  bookmarkPoll: function bookmarkPoll(_ref10, payload) {\n    var commit = _ref10.commit,\n        getters = _ref10.getters;\n    var config = {\n      headers: {\n        // \"Content-Type\": \"application/json\",\n        Authorization: \"Token \".concat(getters.getToken)\n      }\n    };\n    axios.post(\"\".concat(apiBaseUrl.baseRoute, \"/userprofile/bookmark-poll/\"), payload, config).then(function (response) {\n      axios.defaults.headers.common[\"Authorization\"] = config;\n      commit(\"SUCCESS\", response.data);\n    });\n  },\n  getTrendingPolls: function getTrendingPolls(_ref11) {\n    var commit = _ref11.commit,\n        getters = _ref11.getters;\n    var config = {\n      headers: {\n        Authorization: \"Token \".concat(getters.getToken) // \"Content-Type\": \"application/json\"\n\n      }\n    };\n    axios.get(\"\".concat(apiBaseUrl.baseRoute, \"/trending/polls/\"), config).then(function (response) {\n      console.log(response.data, \"FROM TRENDING POLLS\");\n      axios.defaults.headers.common[\"Authorization\"] = config;\n      commit(\"TRENDING_POLLS\", response.data);\n    });\n  },\n  getTrendingFeeds: function getTrendingFeeds(_ref12) {\n    var commit = _ref12.commit,\n        getters = _ref12.getters;\n    var config = {\n      headers: {\n        Authorization: \"Token \".concat(getters.getToken) // \"Content-Type\": \"application/json\"\n\n      }\n    };\n    axios.get(\"\".concat(apiBaseUrl.baseRoute, \"/trending/feed/\"), config).then(function (response) {\n      console.log(response.data, \"FROM TRENDING Feeds\");\n      axios.defaults.headers.common[\"Authorization\"] = config;\n      commit(\"SUCCESS\", response.data);\n    });\n  },\n  searchPolls: function searchPolls(_ref13, payload) {\n    var commit = _ref13.commit,\n        getters = _ref13.getters;\n    var config = {\n      headers: {\n        Authorization: \"Token \".concat(getters.getToken) // \"Content-Type\": \"application/json\"\n\n      }\n    };\n    axios.get(\"\".concat(apiBaseUrl.baseRoute, \"/search/poll/?search=\") + payload, config).then(function (response) {\n      console.log(response.data, \"SEARCH RESULT\");\n      axios.defaults.headers.common[\"Authorization\"] = config;\n      commit(\"SEARCH_RESULT\", response.data);\n    });\n  }\n}; // These are used to update our state depending on the response gotten when an action is dispatched\n\nvar mutations = {\n  auth_request: function auth_request(state) {\n    state.status = \"loading\";\n  },\n  auth_success: function auth_success(state, payload) {\n    var token = payload.token,\n        pk = payload.pk;\n    state.status = \"success\";\n    state.loggedIn = true;\n    state.token = token;\n    state.userID = pk;\n  },\n  auth_error: function auth_error(state, payload) {\n    var data = payload.data;\n    state.status = \"error\";\n    state.isLoading = false;\n    state.error = data;\n  },\n  logout: function logout(state) {\n    state.status = \"\";\n    state.token = \"\";\n  },\n  fetch_users: function fetch_users(state, payload) {\n    var followed = payload.followed,\n        followers = payload.followers,\n        likes = payload.likes,\n        polls = payload.polls,\n        user = _objectWithoutProperties(payload, [\"followed\", \"followers\", \"likes\", \"polls\"]);\n\n    state.user.userObj = user;\n    state.user.followed = followed;\n    state.user.followers = followers;\n    state.user.polls = polls;\n    state.user.likes = likes;\n  },\n  SUCCESS: function SUCCESS(state, payload) {\n    return state.Polls = payload;\n  },\n  TRENDING_POLLS: function TRENDING_POLLS(state, payload) {\n    return state.trendingPolls = payload;\n  }\n}; // Going forward the config variable can be used as a helper function to avoid repeating same codes whenever\n// you want to make a request to an endpoint that is restricted\n// const config = {\n// \theaders: {\n// \t\tAuthorization: `Token ${getters.getToken}`\n// \t\t// \"Content-Type\": \"application/json\"\n// \t}\n// };\n\nexport default {\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations // config\n\n};",{"version":3,"sources":["/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/src/store/modules/UserAuthentication.js"],"names":["axios","apiBaseUrl","state","user","userObj","followers","followed","polls","likes","userID","error","status","token","localStorage","getItem","loggedIn","Polls","trendingPolls","SinglePolls","getters","allPolls","pollsTrending","isLoggedIn","authStatus","getUser","numberOfFollowers","length","numberOfFollowed","numberOfPolls","getToken","getuserID","isAuthenticated","actions","login","payload","commit","dispatch","Promise","resolve","reject","url","baseRoute","data","method","then","response","pk","setItem","defaults","headers","common","catch","err","logout","removeItem","register","id","config","Authorization","get","getPolls","console","log","newPoll","post","likePoll","voteChoice","poll","choice","bookmarkPoll","getTrendingPolls","getTrendingFeeds","searchPolls","mutations","auth_request","auth_success","auth_error","isLoading","fetch_users","SUCCESS","TRENDING_POLLS"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { apiBaseUrl } from \"../baseUrl\";\n\nconst state = {\n\t// The keys defined below represents the initial state of our data the first time our app loads\n\tuser: {\n\t\tuserObj: {},\n\t\tfollowers: [],\n\t\tfollowed: [],\n\t\tpolls: [],\n\t\tlikes: []\n\t},\n\tuserID: null,\n\terror: [],\n\tstatus: \"\",\n\ttoken: localStorage.getItem(\"token\") || \"\",\n\tloggedIn: false,\n\tPolls: [],\n\ttrendingPolls: [],\n\tSinglePolls: {}\n};\n\n// getters pull updated value from our data and they are then called by the components that needs them to\n// present data to the user(s)\nconst getters = {\n\tallPolls: state => state.Polls,\n\tpollsTrending: state => state.trendingPolls,\n\tisLoggedIn: state => !!state.token,\n\tauthStatus: state => state.status,\n\tgetUser: state => state.user,\n\tnumberOfFollowers: state => state.user.followers.length,\n\tnumberOfFollowed: state => state.user.followed.length,\n\tnumberOfPolls: state => state.user.polls.length,\n\tgetToken: state => state.token,\n\tgetuserID: state => state.userID,\n\tisAuthenticated: state => state.loggedIn\n};\n\n// actions are mostly responsible for performing CRUD operations as allowed on the API endpoints being called\nconst actions = {\n\t// This is used to make a post request to the login API, where payload is the data that was passed when the\n\t// login action was dispatched from the Login component\n\tlogin({ commit, dispatch }, payload) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcommit(\"auth_request\");\n\t\t\taxios({\n\t\t\t\turl: `${apiBaseUrl.baseRoute}/users/login/`,\n\t\t\t\tdata: payload,\n\t\t\t\tmethod: \"POST\"\n\t\t\t})\n\t\t\t\t.then(response => {\n\t\t\t\t\tconst token = response.data.token;\n\t\t\t\t\tconst user = response.data.pk;\n\t\t\t\t\tlocalStorage.setItem(\"token\", token);\n\t\t\t\t\taxios.defaults.headers.common[\"Authorization\"] = token;\n\t\t\t\t\tcommit(\"auth_success\", { token, user });\n\t\t\t\t\t// Here we are dispatching the getUser action since we want to get the loggedIn users profile\n\t\t\t\t\t// along with the data being sent back by the login action\n\t\t\t\t\tdispatch(\"getUser\", user);\n\t\t\t\t\tresolve(response);\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tcommit(\"auth_error\");\n\t\t\t\t\t// localStorage.removeItem(\"token\");\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t});\n\t},\n\n\tlogout({ commit }) {\n\t\t// This action is used to logout a user\n\t\treturn new Promise(resolve => {\n\t\t\tcommit(\"logout\");\n\t\t\tlocalStorage.removeItem(\"token\");\n\t\t\tdelete axios.defaults.headers.common[\"Authorization\"];\n\t\t\tresolve();\n\t\t});\n\t},\n\n\t// This action is used to send a post request to the backend API to register a new user\n\tregister: async ({ commit }, payload) => {\n\t\tlet { response } = await axios({\n\t\t\turl: `${apiBaseUrl.baseRoute}/users/signup/`,\n\t\t\tdata: payload,\n\t\t\tmethod: \"POST\"\n\t\t});\n\t\tcommit(\"auth_success\", response);\n\t},\n\n\t// This action is used to make a get request to the API endpoint so we can fetch data to update our\n\t// current loggedIn user profile\n\tgetUser({ commit, getters }, id) {\n\t\tlet config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Token ${getters.getToken}`\n\t\t\t\t// \"Content-Type\": \"application/json\"\n\t\t\t}\n\t\t};\n\t\taxios\n\t\t\t.get(`${apiBaseUrl.baseRoute}/userprofile/${id}/`, config)\n\t\t\t.then(response => {\n\t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n\t\t\t\tcommit(\"fetch_users\", response.data);\n\t\t\t});\n\t},\n\n\t// This action is used to get all available polls from the server\n\tasync getPolls({ commit }) {\n\t\tconst response = await axios.get(`${apiBaseUrl.baseRoute}/polls/polls/`);\n\t\tconsole.log(response.data, \"Polls from the API\");\n\t\tcommit(\"SUCCESS\", response.data);\n\t},\n\t// this action is used to make a post request to create a new poll\n\tnewPoll({ commit, getters }, payload) {\n\t\tconsole.log(\"DATA FROM POLL CREATE\", payload);\n\t\tlet config = {\n\t\t\theaders: {\n\t\t\t\t// \"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: `Token ${getters.getToken}`\n\t\t\t}\n\t\t};\n\t\taxios\n\t\t\t.post(`${apiBaseUrl.baseRoute}/polls/create-polls/`, payload, config)\n\t\t\t.then(response => {\n\t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n\t\t\t\tcommit(\"SUCCESS\", response.data);\n\t\t\t});\n\t},\n\tlikePoll({ commit, getters }, payload) {\n\t\tlet config = {\n\t\t\theaders: {\n\t\t\t\t// \"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: `Token ${getters.getToken}`\n\t\t\t}\n\t\t};\n\t\taxios\n\t\t\t.post(`${apiBaseUrl.baseRoute}/userprofile/like-poll/`, payload, config)\n\t\t\t.then(response => {\n\t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n\t\t\t\tcommit(\"SUCCESS\", response.data);\n\t\t\t});\n\t},\n\n\t// This action is used to select a post request for voting on a particular choice.\n\tvoteChoice({ commit, getters }, payload) {\n\t\tconsole.log(payload, \"FROM VOTE CHOICE ACTION\");\n\t\tconst { poll, choice } = { ...payload };\n\t\tlet config = {\n\t\t\theaders: {\n\t\t\t\t// \"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: `Token ${getters.getToken}`\n\t\t\t}\n\t\t};\n\t\taxios\n\t\t\t.post(\n\t\t\t\t`${apiBaseUrl.baseRoute}/polls/vote/${poll}/${choice}/`,\n\t\t\t\tpayload,\n\t\t\t\tconfig\n\t\t\t)\n\t\t\t.then(response => {\n\t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n\t\t\t\tcommit(\"SUCCESS\", response.data);\n\t\t\t});\n\t},\n\tbookmarkPoll({ commit, getters }, payload) {\n\t\tlet config = {\n\t\t\theaders: {\n\t\t\t\t// \"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: `Token ${getters.getToken}`\n\t\t\t}\n\t\t};\n\t\taxios\n\t\t\t.post(\n\t\t\t\t`${apiBaseUrl.baseRoute}/userprofile/bookmark-poll/`,\n\t\t\t\tpayload,\n\t\t\t\tconfig\n\t\t\t)\n\t\t\t.then(response => {\n\t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n\t\t\t\tcommit(\"SUCCESS\", response.data);\n\t\t\t});\n\t},\n\n\tgetTrendingPolls({ commit, getters }) {\n\t\tlet config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Token ${getters.getToken}`\n\t\t\t\t// \"Content-Type\": \"application/json\"\n\t\t\t}\n\t\t};\n\t\taxios\n\t\t\t.get(`${apiBaseUrl.baseRoute}/trending/polls/`, config)\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response.data, \"FROM TRENDING POLLS\");\n\t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n\t\t\t\tcommit(\"TRENDING_POLLS\", response.data);\n\t\t\t});\n\t},\n\tgetTrendingFeeds({ commit, getters }) {\n\t\tlet config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Token ${getters.getToken}`\n\t\t\t\t// \"Content-Type\": \"application/json\"\n\t\t\t}\n\t\t};\n\t\taxios\n\t\t\t.get(`${apiBaseUrl.baseRoute}/trending/feed/`, config)\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response.data, \"FROM TRENDING Feeds\");\n\t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n\t\t\t\tcommit(\"SUCCESS\", response.data);\n\t\t\t});\n\t},\n\tsearchPolls({ commit, getters }, payload) {\n\t\tlet config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Token ${getters.getToken}`\n\t\t\t\t// \"Content-Type\": \"application/json\"\n\t\t\t}\n\t\t};\n\t\taxios\n\t\t\t.get(`${apiBaseUrl.baseRoute}/search/poll/?search=` + payload, config)\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response.data, \"SEARCH RESULT\");\n\t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n\t\t\t\tcommit(\"SEARCH_RESULT\", response.data);\n\t\t\t});\n\t}\n};\n\n// These are used to update our state depending on the response gotten when an action is dispatched\nconst mutations = {\n\tauth_request(state) {\n\t\tstate.status = \"loading\";\n\t},\n\tauth_success(state, payload) {\n\t\tconst { token, pk } = payload;\n\t\tstate.status = \"success\";\n\t\tstate.loggedIn = true;\n\t\tstate.token = token;\n\t\tstate.userID = pk;\n\t},\n\tauth_error(state, payload) {\n\t\tconst { data } = payload;\n\t\tstate.status = \"error\";\n\t\tstate.isLoading = false;\n\t\tstate.error = data;\n\t},\n\tlogout(state) {\n\t\tstate.status = \"\";\n\t\tstate.token = \"\";\n\t},\n\tfetch_users(state, payload) {\n\t\tconst { followed, followers, likes, polls, ...user } = payload;\n\t\tstate.user.userObj = user;\n\t\tstate.user.followed = followed;\n\t\tstate.user.followers = followers;\n\t\tstate.user.polls = polls;\n\t\tstate.user.likes = likes;\n\t},\n\tSUCCESS: (state, payload) => (state.Polls = payload),\n\tTRENDING_POLLS: (state, payload) => (state.trendingPolls = payload)\n};\n\n// Going forward the config variable can be used as a helper function to avoid repeating same codes whenever\n// you want to make a request to an endpoint that is restricted\n\n// const config = {\n// \theaders: {\n// \t\tAuthorization: `Token ${getters.getToken}`\n// \t\t// \"Content-Type\": \"application/json\"\n// \t}\n// };\n\nexport default {\n\tstate,\n\tgetters,\n\tactions,\n\tmutations\n\t// config\n};\n"]}]}