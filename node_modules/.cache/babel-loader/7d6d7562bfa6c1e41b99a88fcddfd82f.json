{"remainingRequest":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/babel-loader/lib/index.js!/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/eslint-loader/index.js??ref--13-0!/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/src/store/modules/Polls.js","dependencies":[{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/src/store/modules/Polls.js","mtime":1587026748615},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/cache-loader/dist/cjs.js","mtime":1586229982811},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// import { apiBaseUrl } from \"../baseUrl\";\n// import axios from \"axios\";\n// import config from \"./UserAuthentication\";\n// const state = {\n// \tPolls: [],\n// \tSinglePolls: {},\n// \ttoken: localStorage.getItem(\"token\") || \"\"\n// };\n// const getters = {\n// \tallPolls: state => state.Polls,\n// \tgetToken: state => state.token\n// };\n// const actions = {\n// \tasync getPolls({ commit }) {\n// \t\tconst response = await axios.get(`${apiBaseUrl.baseRoute}/polls/polls/`);\n// \t\tcommit(\"SUCCESS\", response.data);\n// \t},\n// \tnewPoll({ commit }, payload) {\n// \t\tlet config = {\n// \t\t\theaders: {\n// \t\t\t\tAuthorization: `Token ${getters.getToken}`,\n// \t\t\t\t\"Content-Type\": \"application/json\"\n// \t\t\t}\n// \t\t};\n// \t\taxios\n// \t\t\t.post(`${apiBaseUrl.baseRoute}/polls/create-polls/`, {\n// \t\t\t\tpayload,\n// \t\t\t\tconfig\n// \t\t\t})\n// \t\t\t.then(response => {\n// \t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n// \t\t\t\tcommit(\"SUCCESS\", response.data);\n// \t\t\t});\n// \t}\n// };\n// const mutations = {\n// \tSUCCESS: (state, payload) => (state.Polls = payload)\n// \t// SUCCESS: (state, payload) => (state.Polls = payload)\n// };\n// export default {\n// \tstate,\n// \tgetters,\n// \tactions,\n// \tmutations\n// };\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";",{"version":3,"sources":["/home/baron/Documents/projects/Client/YOUDECIDE/youdecide_vue/src/store/modules/Polls.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { apiBaseUrl } from \"../baseUrl\";\n// import axios from \"axios\";\n// import config from \"./UserAuthentication\";\n\n// const state = {\n// \tPolls: [],\n// \tSinglePolls: {},\n// \ttoken: localStorage.getItem(\"token\") || \"\"\n// };\n\n// const getters = {\n// \tallPolls: state => state.Polls,\n// \tgetToken: state => state.token\n// };\n\n// const actions = {\n// \tasync getPolls({ commit }) {\n// \t\tconst response = await axios.get(`${apiBaseUrl.baseRoute}/polls/polls/`);\n// \t\tcommit(\"SUCCESS\", response.data);\n// \t},\n// \tnewPoll({ commit }, payload) {\n// \t\tlet config = {\n// \t\t\theaders: {\n// \t\t\t\tAuthorization: `Token ${getters.getToken}`,\n// \t\t\t\t\"Content-Type\": \"application/json\"\n// \t\t\t}\n// \t\t};\n// \t\taxios\n// \t\t\t.post(`${apiBaseUrl.baseRoute}/polls/create-polls/`, {\n// \t\t\t\tpayload,\n// \t\t\t\tconfig\n// \t\t\t})\n// \t\t\t.then(response => {\n// \t\t\t\taxios.defaults.headers.common[\"Authorization\"] = config;\n// \t\t\t\tcommit(\"SUCCESS\", response.data);\n// \t\t\t});\n// \t}\n// };\n\n// const mutations = {\n// \tSUCCESS: (state, payload) => (state.Polls = payload)\n// \t// SUCCESS: (state, payload) => (state.Polls = payload)\n// };\n\n// export default {\n// \tstate,\n// \tgetters,\n// \tactions,\n// \tmutations\n// };\n"]}]}